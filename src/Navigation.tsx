import React, { useState, useRef, useEffect } from 'react';
import './Navigation.css';

type TranslationKeys = 'home' | 'docs' | 'share' | 'copyLink' | 'shareToWechat' | 'shareToWeibo' | 'getStarted' | 'contactSales' | 'liveDemo' | 'heroDescription' | 'innovation' | 'excellence' | 'creativity' | 'advancedNlp' | 'advancedNlpDesc' | 'multimodalInteraction' | 'multimodalInteractionDesc' | 'proactiveEngagement' | 'proactiveEngagementDesc' | 'persistentMemory' | 'persistentMemoryDesc';

type Translations = {
  [key in TranslationKeys]: string;
};

const translations: Record<string, Translations> = {
  en: {
    home: "Home",
    docs: "Documentation", 
    share: "Share",
    copyLink: "Copy Link",
    shareToWechat: "Share to WeChat",
    shareToWeibo: "Share to Weibo",
    getStarted: "Get Started",
    contactSales: "Development Plan", 
    liveDemo: "Live Trial",
    heroDescription: "Integrate natural language processing, computer vision, speech recognition, and emotional computing technologies to build intelligent interactive partners with unique personalities and emotional understanding capabilities, providing users with a more humanized and personalized AI experience.",
    innovation: "Innovation",
    excellence: "Excellence", 
    creativity: "Creativity",
    advancedNlp: "Advanced NLP Processing",
    advancedNlpDesc: "Utilize state-of-the-art natural language processing models for contextual understanding, sentiment analysis, and intelligent conversation flow with multi-language support.",
    multimodalInteraction: "Multimodal Interaction",
    multimodalInteractionDesc: "Support for text, voice, image, and video inputs with seamless integration across different communication channels and real-time processing capabilities.",
    proactiveEngagement: "Proactive Engagement", 
    proactiveEngagementDesc: "AI-driven proactive communication based on user behavior patterns, contextual awareness, and intelligent scheduling for optimal user experience and engagement.",
    persistentMemory: "Persistent Memory System",
    persistentMemoryDesc: "Advanced memory architecture that maintains long-term context, user preferences, and conversation history for personalized and continuous interactions across sessions."
  },
  zh: {
    home: "È¶ñÈ°µ",
    docs: "ÊñáÊ°£",
    share: "ÂàÜ‰∫´", 
    copyLink: "Â§çÂà∂ÈìæÊé•",
    shareToWechat: "ÂàÜ‰∫´Âà∞ÂæÆ‰ø°",
    shareToWeibo: "ÂàÜ‰∫´Âà∞ÂæÆÂçö",
    getStarted: "ÂºÄÂßã‰ΩøÁî®",
    contactSales: "ÂèëÂ±ïËßÑÂàí",
    liveDemo: "Âú®Á∫øËØïÁî®", 
    heroDescription: "ËûçÂêàËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ„ÄÅËÆ°ÁÆóÊú∫ËßÜËßâ„ÄÅËØ≠Èü≥ËØÜÂà´‰∏éÊÉÖÊÑüËÆ°ÁÆóÊäÄÊúØÔºåÊûÑÂª∫ÂÖ∑ÊúâÁã¨Áâπ‰∏™ÊÄßÂíåÊÉÖÊÑüÁêÜËß£ËÉΩÂäõÁöÑÊô∫ËÉΩ‰∫§‰∫í‰ºô‰º¥Ôºå‰∏∫Áî®Êà∑Êèê‰æõÊõ¥Âä†‰∫∫ÊÄßÂåñ„ÄÅ‰∏™ÊÄßÂåñÁöÑAI‰ΩìÈ™å",
    innovation: "ÂàõÊñ∞",
    excellence: "ÂçìË∂ä",
    creativity: "ÂàõÈÄ†Âäõ",
    advancedNlp: "È´òÁ∫ßËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ",
    advancedNlpDesc: "Âà©Áî®ÊúÄÂÖàËøõÁöÑËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÊ®°ÂûãÔºåÂÆûÁé∞‰∏ä‰∏ãÊñáÁêÜËß£„ÄÅÊÉÖÊÑüÂàÜÊûêÂíåÊô∫ËÉΩÂØπËØùÊµÅÔºåÂπ∂ÊîØÊåÅÂ§öËØ≠Ë®Ä„ÄÇ",
    multimodalInteraction: "Â§öÊ®°ÊÄÅ‰∫§‰∫í",
    multimodalInteractionDesc: "ÊîØÊåÅÊñáÊú¨„ÄÅËØ≠Èü≥„ÄÅÂõæÂÉèÂíåËßÜÈ¢ëËæìÂÖ•ÔºåÂÆûÁé∞‰∏çÂêåÈÄö‰ø°Ê∏†ÈÅìÁöÑÊó†ÁºùÈõÜÊàêÂíåÂÆûÊó∂Â§ÑÁêÜËÉΩÂäõ„ÄÇ",
    proactiveEngagement: "‰∏ªÂä®Âºè‰∫§‰∫í",
    proactiveEngagementDesc: "Âü∫‰∫éÁî®Êà∑Ë°å‰∏∫Ê®°Âºè„ÄÅ‰∏ä‰∏ãÊñáÊÑüÁü•ÂíåÊô∫ËÉΩË∞ÉÂ∫¶ÔºåÂÆûÁé∞AIÈ©±Âä®ÁöÑ‰∏ªÂä®ÂºèÊ≤üÈÄöÔºåÊèê‰æõÊúÄ‰Ω≥Áî®Êà∑‰ΩìÈ™åÂíåÂèÇ‰∏éÂ∫¶„ÄÇ",
    persistentMemory: "ÊåÅ‰πÖÂåñËÆ∞ÂøÜÁ≥ªÁªü", 
    persistentMemoryDesc: "ÂÖàËøõÁöÑËÆ∞ÂøÜÊû∂ÊûÑÔºåÁª¥Êä§ÈïøÊúü‰∏ä‰∏ãÊñá„ÄÅÁî®Êà∑ÂÅèÂ•ΩÂíå‰ºöËØùÂéÜÂè≤ÔºåÂÆûÁé∞‰∏™ÊÄßÂåñÂíåÊåÅÁª≠ÁöÑË∑®‰ºöËØù‰∫§‰∫í„ÄÇ"
  },
  ja: {
    home: "„Éõ„Éº„É†",
    docs: "„Éâ„Ç≠„É•„É°„É≥„Éà",
    share: "ÂÖ±Êúâ", 
    copyLink: "„É™„É≥„ÇØ„Çí„Ç≥„Éî„Éº",
    shareToWechat: "WeChat„ÅßÂÖ±Êúâ",
    shareToWeibo: "Weibo„ÅßÂÖ±Êúâ",
    getStarted: "Âßã„ÇÅ„Çã",
    contactSales: "ÈñãÁô∫Ë®àÁîª",
    liveDemo: "„Ç™„É≥„É©„Ç§„É≥„Éà„É©„Ç§„Ç¢„É´", 
    heroDescription: "Ëá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ„ÄÅ„Ç≥„É≥„Éî„É•„Éº„Çø„Éì„Ç∏„Éß„É≥„ÄÅÈü≥Â£∞Ë™çË≠ò„ÄÅÊÑüÊÉÖË®àÁÆóÊäÄË°ì„ÇíÁµ±Âêà„Åó„ÄÅÁã¨Áâπ„Å™ÂÄãÊÄß„Å®ÊÑüÊÉÖÁêÜËß£ËÉΩÂäõ„ÇíÊåÅ„Å§Áü•ÁöÑ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éë„Éº„Éà„Éä„Éº„ÇíÊßãÁØâ„Åó„ÄÅ„É¶„Éº„Ç∂„Éº„Å´„Çà„Çä‰∫∫ÈñìÁöÑ„ÅßÂÄãÊÄßÁöÑ„Å™AI‰ΩìÈ®ì„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ",
    innovation: "Èù©Êñ∞",
    excellence: "ÂçìË∂ä",
    creativity: "ÂâµÈÄ†ÊÄß",
    advancedNlp: "È´òÂ∫¶„Å™Ëá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ",
    advancedNlpDesc: "ÊúÄÂÖàÁ´Ø„ÅÆËá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ„É¢„Éá„É´„ÇíÊ¥ªÁî®„Åó„ÄÅÊñáËÑàÁêÜËß£„ÄÅÊÑüÊÉÖÂàÜÊûê„ÄÅÁü•ÁöÑ‰ºöË©±„Éï„É≠„Éº„ÇíÂÆüÁèæ„Åó„ÄÅÂ§öË®ÄË™û„Çí„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ",
    multimodalInteraction: "„Éû„É´„ÉÅ„É¢„Éº„ÉÄ„É´„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥",
    multimodalInteractionDesc: "„ÉÜ„Ç≠„Çπ„Éà„ÄÅÈü≥Â£∞„ÄÅÁîªÂÉè„ÄÅÂãïÁîª„ÅÆÂÖ•Âäõ„Çí„Çµ„Éù„Éº„Éà„Åó„ÄÅÁï∞„Å™„ÇãÈÄö‰ø°„ÉÅ„É£„Éç„É´Èñì„ÅÆ„Ç∑„Éº„É†„É¨„Çπ„Å™Áµ±Âêà„Å®„É™„Ç¢„É´„Çø„Ç§„É†Âá¶ÁêÜËÉΩÂäõ„ÇíÂÆüÁèæ„Åó„Åæ„Åô„ÄÇ",
    proactiveEngagement: "Á©çÊ•µÁöÑ„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà",
    proactiveEngagementDesc: "„É¶„Éº„Ç∂„Éº„ÅÆË°åÂãï„Éë„Çø„Éº„É≥„ÄÅÊñáËÑàË™çË≠ò„ÄÅÁü•ÁöÑ„Çπ„Ç±„Ç∏„É•„Éº„É™„É≥„Ç∞„Å´Âü∫„Å•„ÅèAIÈßÜÂãï„ÅÆÁ©çÊ•µÁöÑ„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„Å´„Çà„Çä„ÄÅÊúÄÈÅ©„Å™„É¶„Éº„Ç∂„Éº‰ΩìÈ®ì„Å®„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ",
    persistentMemory: "Ê∞∏Á∂ö„É°„É¢„É™„Ç∑„Çπ„ÉÜ„É†", 
    persistentMemoryDesc: "Èï∑ÊúüÊñáËÑà„ÄÅ„É¶„Éº„Ç∂„ÉºË®≠ÂÆö„ÄÅ‰ºöË©±Â±•Ê≠¥„ÇíÁ∂≠ÊåÅ„Åô„ÇãÂÖàÈÄ≤ÁöÑ„Å™„É°„É¢„É™„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Å´„Çà„Çä„ÄÅ„Çª„ÉÉ„Ç∑„Éß„É≥Èñì„Åß„ÅÆÂÄãÊÄßÂåñ„Åï„Çå„ÅüÁ∂ôÁ∂öÁöÑ„Å™„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÇíÂÆüÁèæ„Åó„Åæ„Åô„ÄÇ"
  }
};

interface NavigationProps {
  currentPage: string;
  language: string;
  onNavigate: (page: string) => void;
  onLanguageChange: (language: string) => void;
}

const Navigation: React.FC<NavigationProps> = ({ 
  currentPage, 
  language, 
  onNavigate, 
  onLanguageChange 
}) => {
  const [showLanguageMenu, setShowLanguageMenu] = useState(false);
  const languageMenuRef = useRef<HTMLDivElement>(null);

  const handleLanguageChange = (newLanguage: string) => {
    onLanguageChange(newLanguage);
    setShowLanguageMenu(false);
  };

  // ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠‰∏ãÊãâËèúÂçï
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (languageMenuRef.current && !languageMenuRef.current.contains(event.target as Node)) {
        setShowLanguageMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Ëé∑ÂèñÂΩìÂâçËØ≠Ë®ÄÁöÑÁøªËØë
  const t = (key: TranslationKeys): string => translations[language][key] || key;

  return (
    <nav className="navbar">
      <div className="nav-container">
        <div className="nav-logo">
          <div className="ai-logo">AI</div>
          <div className="logo-text">EchoSoul AI Platform</div>
        </div>
        
        <div className="nav-right">
          <button 
            className={`nav-link ${currentPage === 'home' ? 'active' : ''}`} 
            onClick={() => onNavigate('home')}
          >
            {t('home')}
          </button>
          <button 
            className={`nav-link ${currentPage === 'docs' ? 'active' : ''}`} 
            onClick={() => onNavigate('docs')}
          >
            {t('docs')}
          </button>
          <div className="language-selector" ref={languageMenuRef} onClick={() => setShowLanguageMenu(!showLanguageMenu)}>
            <span className="globe-icon">üåê</span>
            <span className="lang-text">
              {language === 'zh' ? '‰∏≠Êñá' : language === 'en' ? 'EN' : 'Êó•Êú¨Ë™û'}
            </span>
            <span className="chevron">‚ñº</span>
            
            {showLanguageMenu && (
              <div className="language-menu">
                <div 
                  className={`language-option ${language === 'zh' ? 'active' : ''}`}
                  onClick={() => handleLanguageChange('zh')}
                >
                  ‰∏≠Êñá
                </div>
                <div 
                  className={`language-option ${language === 'en' ? 'active' : ''}`}
                  onClick={() => handleLanguageChange('en')}
                >
                  English
                </div>
                <div 
                  className={`language-option ${language === 'ja' ? 'active' : ''}`}
                  onClick={() => handleLanguageChange('ja')}
                >
                  Êó•Êú¨Ë™û
                </div>
              </div>
            )}
          </div>
          <button className="github-btn" onClick={() => window.open('https://github.com/yubeining/EchoSoul-frontend', '_blank')}>
            <svg className="github-icon" viewBox="0 0 24 24" fill="#333">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
            GitHub
          </button>
        </div>
      </div>
    </nav>
  );
};

export default Navigation;
